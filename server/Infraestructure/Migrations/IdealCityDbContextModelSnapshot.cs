// <auto-generated />
using System;
using Infraestructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(IdealCityDbContext))]
    partial class IdealCityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("Domain.Cities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("Country", b =>
                {
                    b.OwnsMany("Domain.City.ValueObjects.CityId", "CityIds", b1 =>
                        {
                            b1.Property<Guid>("CountryId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.HasKey("CountryId", "Id");

                            b1.ToTable("CityId");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");
                        });

                    b.Navigation("CityIds");
                });

            modelBuilder.Entity("Domain.Cities.City", b =>
                {
                    b.HasOne("Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Cities.Weather", "Weather", b1 =>
                        {
                            b1.Property<Guid>("CityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AverageTemperature")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("AverageTemperature");

                            b1.HasKey("CityId");

                            b1.ToTable("Cities");

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.OwnsMany("Domain.City.ValueObjects.CityReview", "Reviews", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("CityReviewId");

                            b1.Property<Guid>("CityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Rating")
                                .HasColumnType("int");

                            b1.Property<string>("Review")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.HasKey("Id", "CityId");

                            b1.HasIndex("CityId");

                            b1.ToTable("CityReviews", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.OwnsMany("Domain.City.ValueObjects.CityReviewId", "ReviewsIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("CityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ReviewId");

                            b1.HasKey("Id");

                            b1.HasIndex("CityId");

                            b1.ToTable("CityReviewIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.OwnsOne("Domain.City.ValueObjects.Indicator", "Indicators", b1 =>
                        {
                            b1.Property<Guid>("CityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AverageMonthlyNetSalary")
                                .HasColumnType("text")
                                .HasColumnName("AverageMonthlyNetSalary");

                            b1.Property<string>("CostIndex")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("CostIndex");

                            b1.Property<string>("Gasoline")
                                .HasColumnType("text")
                                .HasColumnName("Gasoline");

                            b1.Property<string>("PublicTransportationIndex")
                                .HasColumnType("text")
                                .HasColumnName("PublicTransportationIndex");

                            b1.HasKey("CityId");

                            b1.ToTable("Cities");

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.OwnsOne("Domain.Common.ValueObjects.AverageRating", "AverageRating", b1 =>
                        {
                            b1.Property<Guid>("CityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TotalRatings")
                                .HasColumnType("integer")
                                .HasColumnName("AverageRatingTotalRatings");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision")
                                .HasColumnName("AverageRatingValue");

                            b1.HasKey("CityId");

                            b1.ToTable("Cities");

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.Navigation("AverageRating");

                    b.Navigation("Country");

                    b.Navigation("Indicators");

                    b.Navigation("Reviews");

                    b.Navigation("ReviewsIds");

                    b.Navigation("Weather");
                });

            modelBuilder.Entity("Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
